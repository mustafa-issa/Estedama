@using ChartsMix.Models
@using Highsoft.Web.Mvc.Charts
@model BarChartModel

<div>
    @using (Html.BeginForm("Index", "Home"))
    {
    <div class="jarviswidget-editbox">
        <div class="widget-body">
            <div class="row">
                <div class="col-md-4 form-group">
                    @Html.EnumDropDownListFor(m => m.period, "Period", new { @class = "form-control", @id = "ddlBar" })
                </div>
                <div class="col-md-4 form-group">
                    <input type="text" class="form-control" id="tbBarValue" name="StandardValue" placeholder="Standard Value" />
                </div>
                <div class="col-md-4 form-group">
                    <section>
                        <label style="float : right;" class="inline-block checkbox"><input type="checkbox" checked="checked" name="defaultColors" id="chkBar"><i></i>Default Colors</label>
                    </section>
                </div>
            </div>
            <div class="row" id="divDateBar" style="display : none">
                <div class="col-md-3 form-group">
                    @Html.EditorFor(m => m.From)
                </div>
                <div class="col-md-3 form-group">
                    @Html.EditorFor(m => m.To)
                </div>
            </div>

            <div class="tree smart-form">
                <ul>
                    @Html.Raw(Helpers.FormTreeView(Model.TreeRoot, "bar"))
                </ul>
            </div>
        </div>
        <input type="button" class="btn btn-default" value="Show Bar Chart" id="getChartLine" onclick="GetBarChart()" />
        <!-- This area used as dropdown edit box -->
    </div>
    }
    <div class="widget-body">
        
        <div id="barChart"></div>
    </div>
</div>

<script>
    function GetBarChart() {
        var model = {};
        model.Period = $('#ddlBar').val();
        model.From = dateFormat($('#barChartModel_From').val());
        model.To = dateFormat($('#barChartModel_To').val());
        model.Ids = [];
        model.StandardValue = $('#tbBarValue').val();
        var colors = [];
        if ($('#chkBar').is(":checked")) {
            $('input[name=barIds]:checked').each(function () {
                model.Ids.push($(this).attr('value'));
            });
            colors = ['#7cb5ec', '#434348', '#90ed7d', '#f7a35c', '#8085e9', '#f15c80', '#e4d354', '#2b908f', '#f45b5b', '#91e8e1'];
        }
        else {
            $('input[name=barIds]:checked').each(function () {
                model.Ids.push($(this).attr('value'));
                colors.push($(this).attr('color'));
            });
        }
        $.ajax({
            type: "GET",
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetBarChart", "Home")',
            data: model,
            dataType: "json",
            traditional: true,
            success: function (data) {
                var plotValue = $('#tbBarValue').val() == 0 ? null : $('#tbBarValue').val();
                var arr = [];
                var v = [];
                var popup = "";
                var len = data.Result.length;
                for (var i = 0; i < len; i++) {
                    v = [];
                    for (var j = 0; j < data.Result[i].things.length; j++) {
                        if (plotValue != null) {
                            if (data.Result[i].things[j].Y > plotValue)
                                popup += data.Result[i].Name + " exceeded limit at " + data.Details.Dates[i] + "<br />";
                        }
                        v[j] = data.Result[i].things[j].Y;
                    }
                    arr.push({
                        data: v,
                        name: data.Result[i].Name,
                        dataLabels: {
                            formatter: function () {
                                return this.y > 1000 ? parseInt(this.y) : this.y;
                            },
                            enabled: true,
                            color: '#fff',
                            align: 'right',
                            x: 0,
                            y: 10,
                            rotation: -90,
                        }
                    });
                }
                DrawBarChart(arr, colors, data.Details, plotValue, data.MaxConsumption, data.MinConsumption, data.AverageCunsumption);
                if (popup != "")
                {
                    messageFailure(popup);
                }
                    
            },
            error: function (data, dates) {
                alert("Failed");
            }
        });
    }
    function DrawBarChart(data, colors, info, plotValue, max, min, avg) {
        $('#barChartSummary').removeClass('hidden');
        $('#barChartMax').text(Math.round(max));
        $('#barChartMin').text(Math.round(min));
        $('#barChartAvg').text(Math.round(avg));
        max = max;
        min = min;
        avg = avg;
        Highcharts.chart('barChart', {
            exporting: {
                fallbackToExportServer: false,
                allowHTML: true
            },
            credits: {
                enabled: false,
                text: "ChartsMix.com",
                href: "http://www.chartsmix.com"
            },
            colors: colors,
            chart: {
                spacingBottom: 70,
                spacingTop: 0,
                spacingLeft: 10,
                spacingRight: 10,
                type: 'column'
            },
            title: {
                text: info.Title + ' Of Consumption'
            },
            subtitle: {
                text: info.SubTitle
            },
            xAxis: {
                categories: info.Dates
            },
            yAxis: {
                title: {
                    text: 'Consumption'
                },
                plotLines: [{
                    value: plotValue,
                    color: 'red',
                    dashStyle: 'shortdash',
                    width: 2,
                }]
            },
            plotOptions: {
                line: {
                    dataLabels: {
                        enabled: true
                    },
                    enableMouseTracking: true
                }
            },
            series: data
        }, function (chart) {

            chart.renderer.html('<style>table {width : 100%; border-collapse : collapse;} td, th {font-family : "Lucida Grande", "Lucida Sans Unicode", Arial, Helvetica, sans-serif; white-space : nowrap; font-size : 12px; padding: 8px 10px;border-top : 1px solid #ddd;}</style><table id="barTable" class="table table-hover"> <tr><th>Maximum</th><th>Minimum</th><th>Average</th></tr><tr><td>' + max + '</td><td>' + min + '</td><td>' + avg + '</td></tr></table>'
                , 10, $('#barChart').height() - 50)
                .add();
            $('#barTable').parent().css({ "width": "100%" });
        });
    }

</script>