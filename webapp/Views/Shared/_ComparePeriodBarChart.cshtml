@using ChartsMix.Models
@using Highsoft.Web.Mvc.Charts
@model ComparisonChartModel

<div>
    @using (Html.BeginForm("Index", "Home"))
    {
        <div class="jarviswidget-editbox">
            <div class="widget-body">
                <div class="row">
                    <div class="col-md-3 form-group">
                        @Html.EnumDropDownListFor(m => m.period, "Period", new { @class = "form-control", @id = "ddlPeriodBar" })
                    </div>
                </div>

                <div class="row" id="divPeriodCompare">
                    <div class="col-md-3 form-group">
                        @Html.EditorFor(m => m.From)
                    </div>
                    <div class="col-md-3 form-group">
                        @Html.EditorFor(m => m.To)
                    </div>
                </div>

                <div class="tree smart-form">
                    <ul>
                        @Html.Raw(Helpers.FormTreeView(Model.TreeRoot, "period"))
                    </ul>
                </div>
            </div>
            <input type="button" class="btn btn-default" value="Show Comparison Chart" id="getChartLine" onclick="GetComperisonChart()" />
        </div>
    }
    <div class="widget-body">
        <div id="comparisonChart"></div>
    </div>
</div>

<script>
    function GetComperisonChart() {
        var model = {};
        model.Period = $('#ddlPeriodBar').val();
        model.From = dateFormat($('#comparisonChartModel_From').val());
        model.To = dateFormat($('#comparisonChartModel_To').val());
        model.Ids = [];
        $('input[name=periodIds]:checked').each(function () {
            model.Ids.push($(this).attr('value'));
        });
        $.ajax({
            type: "GET",
            contentType: "application/json; charset=utf-8",
            url: '@Url.Action("GetComperisonChart", "Home")',
            data: model,
            dataType: "json",
            traditional: true,
            success: function (data) {
                var plotValue = $('#tbBarValue').val() == 0 ? null : $('#tbBarValue').val();
                var arr = [];
                var v = [];
                var popup = "";
                var len = data.Result.length;
                for (var i = 0; i < len; i++) {
                    v = [];
                    for (var j = 0; j < data.Result[i].things.length; j++) {
                        if (plotValue != null) {
                            if (data.Result[i].things[j].Y > plotValue)
                                popup += data.Result[i].Name + " exceeded limit at " + data.Details.Dates[i] + "<br />";
                        }
                        v[j] = data.Result[i].things[j].Y;
                    }
                    arr.push({
                        data: v,
                        name: data.Result[i].Name
                    });
                }
                DrawComparisonChart(arr, data.Details, plotValue);
                if (popup != "")
                {
                    messageFailure(popup);
                }

            },
            error: function (data, dates) {
                alert("Failed");
            }
        });
    }
    function DrawComparisonChart(data, info, plotValue) {
        Highcharts.chart('comparisonChart', {
            chart: {
                type: 'column'
            },
            title: {
                text: info.Title
            },
            subtitle: {
                text: info.SubTitle
            },
            xAxis: {
                categories: info.Dates
            },

            yAxis: {
                min: 0,
                title: {
                    text: 'Consumption'
                },
                stackLabels: {
                    enabled: true,
                    style: {
                        fontWeight: 'bold',
                        color: (Highcharts.theme && Highcharts.theme.textColor) || 'gray'
                    }
                },
                plotLines: [{
                    value: plotValue,
                    color: 'red',
                    dashStyle: 'shortdash',
                    width: 2,
                }]
            },
            legend: {
                align: 'right',
                x: -30,
                verticalAlign: 'top',
                y: 25,
                floating: true,
                backgroundColor: (Highcharts.theme && Highcharts.theme.background2) || 'white',
                borderColor: '#CCC',
                borderWidth: 1,
                shadow: false
            },
            plotOptions: {
                column: {
                    stacking: 'normal',
                    dataLabels: {
                        enabled: true
                    },
                    enableMouseTracking: true
                }
            },
            series: data
        });
    }

</script>